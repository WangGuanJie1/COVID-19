webpackHotUpdate("index/screen",{

/***/ "./public/javascripts/modules/charts.js":
/*!**********************************************!*\
  !*** ./public/javascripts/modules/charts.js ***!
  \**********************************************/
/*! exports provided: cBarCurrentConfirmed, cDoughnutStatistics, cTendencyTrendFewDays, createWorldMap, bubbleMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cBarCurrentConfirmed\", function() { return cBarCurrentConfirmed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cDoughnutStatistics\", function() { return cDoughnutStatistics; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cTendencyTrendFewDays\", function() { return cTendencyTrendFewDays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createWorldMap\", function() { return createWorldMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bubbleMap\", function() { return bubbleMap; });\n/* harmony import */ var _antv_g2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @antv/g2 */ \"./node_modules/@antv/g2/esm/index.js\");\n/* harmony import */ var _antv_data_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @antv/data-set */ \"./node_modules/@antv/data-set/build/data-set.js\");\n/* harmony import */ var _antv_data_set__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_antv_data_set__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _common_dataprocess__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/dataprocess */ \"./public/javascripts/common/dataprocess.js\");\n\r\n\r\n\r\n/**\r\n * 生成各洲现有确诊周比叠加柱状图\r\n * \r\n * @method cBarCurrentConfirmed\r\n * \r\n * @param {Array} data 疫情数据，需提前排除无用数据\r\n * @param {String} containerName 容器名称\r\n */\r\nfunction cBarCurrentConfirmed(data, containerName) {\r\n    let temporaryData = JSON.parse(JSON.stringify(data));\r\n\r\n    // 数据处理\r\n    let disData = _common_dataprocess__WEBPACK_IMPORTED_MODULE_2__[\"ascData\"](temporaryData, 'reqTime');\r\n    _common_dataprocess__WEBPACK_IMPORTED_MODULE_2__[\"ascData\"](disData, 'continents');\r\n    const chart = new _antv_g2__WEBPACK_IMPORTED_MODULE_0__[\"Chart\"]({\r\n        container: containerName,\r\n        autoFit: true,\r\n    });\r\n    chart.data(data);\r\n    chart.scale('confirmedCount', {\r\n\r\n    });\r\n    chart.axis('date', {\r\n        tickLine: null,\r\n    });\r\n    chart.axis('confirmedCount', {\r\n        label: {\r\n            formatter: text => {\r\n                return text.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\r\n            }\r\n        },\r\n\r\n    });\r\n    chart.legend({\r\n        position: 'bottom',\r\n    });\r\n    chart.tooltip({\r\n        shared: true,\r\n        showMarkers: false,\r\n    });\r\n    chart.interaction('active-region');\r\n    chart\r\n        .interval()\r\n        .adjust('stack')\r\n        .position('date*confirmedCount')\r\n        .color('continents', ['#00f7ff', '#00e3ff', '#00cdff', '#00b7ff', '#00a0fd', '#0087f1', '#106cde']);\r\n\r\n    chart.render();\r\n\r\n};\r\n\r\n/**\r\n * 生成疫情动态环形图\r\n * \r\n * @method cDoughnutStatistics\r\n * \r\n * @param {Array} data 疫情数据，需提前排除无用数据,并比率计算\r\n * @param {String} containerName 容器名称\r\n */\r\nfunction cDoughnutStatistics(data, containerName) {\r\n    let temporaryData = JSON.parse(JSON.stringify(data));\r\n    const chart = new _antv_g2__WEBPACK_IMPORTED_MODULE_0__[\"Chart\"]({\r\n        container: containerName,\r\n        autoFit: true,\r\n    });\r\n    chart.data(temporaryData);\r\n    chart.scale('percent', {\r\n        formatter: (val) => {\r\n            val = val * 100 + '%';\r\n            return val;\r\n        },\r\n    });\r\n    chart.coordinate('theta', {\r\n        radius: 0.75,\r\n        innerRadius: 0.6,\r\n    });\r\n    chart.tooltip({\r\n        showTitle: false,\r\n        showMarkers: false,\r\n    });\r\n    chart\r\n        .interval()\r\n        .adjust('stack')\r\n        .position('percent')\r\n        .color('item')\r\n        .label('percent',\r\n            (percent) => {\r\n                return {\r\n                    content: (temporaryData) => {\r\n                        return `${temporaryData.item} : ${parseInt(percent * 100)}%`;\r\n                    },\r\n                };\r\n            }, {\r\n                offset: 15,\r\n                style: {\r\n                    fontSize: 12,\r\n                    fill: '#bfbfbf',\r\n                },\r\n            }\r\n        )\r\n        .tooltip('item*percent', (item, percent) => {\r\n            percent = parseInt(percent * 100) + '%';\r\n            return {\r\n                name: item,\r\n                value: percent,\r\n            };\r\n        });\r\n    chart.interaction('element-active');\r\n    chart.interaction('element-single-selected');\r\n    chart.render();\r\n}\r\n\r\n/**\r\n * 生成疫情动态曲线折线图\r\n * \r\n * @method cTendencyTrendFewDays\r\n * \r\n * @param {Array} data 显示的数据，需提前排除无用数据\r\n * @param {String} containerName 容器名称\r\n */\r\nfunction cTendencyTrendFewDays(data, containerName) {\r\n    let temporaryData = JSON.parse(JSON.stringify(data));\r\n    // 数据处理\r\n    let disData = _common_dataprocess__WEBPACK_IMPORTED_MODULE_2__[\"ascData\"](temporaryData, 'reqTime');\r\n    let claKeyName = \"situation\";\r\n    let claValKeyName = \"quantity\";\r\n    let claConf = {\r\n        typeInfo: [{\r\n            keyName: claKeyName,\r\n            keyValue: '现存确诊',\r\n            valKeyName: claValKeyName,\r\n            correspondingKey: 'currentConfirmedCount',\r\n        }, {\r\n            keyName: claKeyName,\r\n            keyValue: '累计治愈',\r\n            valKeyName: claValKeyName,\r\n            correspondingKey: 'curedCount',\r\n        }, {\r\n            keyName: claKeyName,\r\n            keyValue: '累计死亡',\r\n            valKeyName: claValKeyName,\r\n            correspondingKey: 'deadCount',\r\n        }, ],\r\n        saveKey: ['date']\r\n    };\r\n    disData = _common_dataprocess__WEBPACK_IMPORTED_MODULE_2__[\"dataClassification\"](disData, claConf);\r\n    // 配置信息\r\n    const chart = new _antv_g2__WEBPACK_IMPORTED_MODULE_0__[\"Chart\"]({\r\n        container: containerName,\r\n        autoFit: true,\r\n    });\r\n    chart.data(disData);\r\n    chart.scale(claValKeyName, {\r\n        // type: 'pow',\r\n        nice: true\r\n    });\r\n    chart.tooltip({\r\n        showCrosshairs: true,\r\n        shared: true,\r\n    });\r\n    chart.legend({\r\n        position: \"bottom\",\r\n    });\r\n    chart.axis(claValKeyName, {\r\n        label: {\r\n            formatter: text => {\r\n                return text.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\r\n            }\r\n        },\r\n    });\r\n    chart\r\n        .line()\r\n        .position('date*' + claValKeyName)\r\n        .color(claKeyName);\r\n    chart\r\n        .point()\r\n        .position('date*' + claValKeyName)\r\n        .color(claKeyName)\r\n        .shape('circle');\r\n    chart.render();\r\n}\r\n\r\n/**\r\n * 生成世界地图\r\n * \r\n * @method createWorldMap\r\n * \r\n * @param {Object} worldData 地图绘制数据\r\n * @param {String} containerName 容器名称\r\n * @param {Object} option 图表配置信息\r\n * \r\n * @return {Object} 国家经纬度视图数据（G2 WorldGeo）\r\n */\r\nfunction createWorldMap(worldData, containerName, option) {\r\n    const ds = new _antv_data_set__WEBPACK_IMPORTED_MODULE_1___default.a();\r\n\r\n    // 基本配置信息\r\n    const chart = new _antv_g2__WEBPACK_IMPORTED_MODULE_0__[\"Chart\"]({\r\n        container: containerName,\r\n        autoFit: true,\r\n    });\r\n    chart.scale({\r\n        longitude: {\r\n            sync: true,\r\n        },\r\n        latitude: {\r\n            sync: true,\r\n        },\r\n    });\r\n    chart.axis(false);\r\n    chart.legend(false);\r\n    chart.tooltip({\r\n        showTitle: true,\r\n        showMarkers: false,\r\n        title: option['tooltipTitle']\r\n    });\r\n\r\n    // 地图配置\r\n    const worldGeo = ds.createView().source(worldData, {\r\n        type: 'GeoJSON',\r\n    });\r\n    const mapView = chart.createView();\r\n    mapView.changeData(worldGeo.rows);\r\n    mapView\r\n        .polygon()\r\n        .position('longitude*latitude')\r\n        .style({\r\n            fill: 'l(90) 0:rgba(75,36,118,1) 1:rgba(75,36,118,1)',\r\n            lineWidth: 1,\r\n            stroke: 'rgba(233,216,246,.8)',\r\n            shadowColor: 'rgba(0,0,0,.06)',\r\n            shadowOffsetX: 5,\r\n            shadowOffsetY: 20,\r\n        })\r\n        .tooltip(false)\r\n        .animate({\r\n            appear: {\r\n                animation: 'grow-in-xy',\r\n                duration: 300\r\n            }\r\n        });\r\n    chart.render();\r\n}\r\n\r\n/**\r\n * 疫情动态气泡地图\r\n * \r\n * @method bubbleMap\r\n * \r\n * @param {Object} worldData 地图绘制数据\r\n * @param {Array} opData 疫情数据，需提前排除无用数据\r\n * @param {String} containerName 容器名称\r\n * @param {Object} option 图表配置信息\r\n */\r\nfunction bubbleMap(worldData, opData, containerName, option) {\r\n    let temporaryData = JSON.parse(JSON.stringify(opData));\r\n    let worldMapData = JSON.parse(JSON.stringify(worldData));\r\n\r\n    const ds = new _antv_data_set__WEBPACK_IMPORTED_MODULE_1___default.a();\r\n\r\n    // 基本配置信息\r\n    const chart = new _antv_g2__WEBPACK_IMPORTED_MODULE_0__[\"Chart\"]({\r\n        container: containerName,\r\n        autoFit: true,\r\n    });\r\n    chart.scale({\r\n        longitude: {\r\n            sync: true,\r\n        },\r\n        latitude: {\r\n            sync: true,\r\n        },\r\n    });\r\n    chart.axis(false);\r\n    chart.legend(false);\r\n    chart.tooltip({\r\n        showTitle: true,\r\n        showMarkers: false,\r\n        title: option['tooltipTitle']\r\n    });\r\n\r\n    // 地图配置\r\n    const worldGeo = ds.createView().source(worldMapData, {\r\n        type: 'GeoJSON',\r\n    });\r\n    const mapView = chart.createView();\r\n    mapView.changeData(worldGeo.rows);\r\n    mapView\r\n        .polygon()\r\n        .position('longitude*latitude')\r\n        .style({\r\n            fill: 'l(90) 0:rgba(75,36,118,1) 1:rgba(75,36,118,1)',\r\n            lineWidth: 1,\r\n            stroke: 'rgba(233,216,246,.8)',\r\n            shadowColor: 'rgba(0,0,0,.06)',\r\n            shadowOffsetX: 5,\r\n            shadowOffsetY: 20,\r\n        })\r\n        .tooltip(false)\r\n        .animate({\r\n            appear: {\r\n                animation: 'grow-in-xy',\r\n                duration: 300\r\n            }\r\n        });\r\n    // 数据处理\r\n    const disData = ds.createView().source(temporaryData);\r\n    disData\r\n        .transform({\r\n            type: 'pick',\r\n            fields: ['date', 'provinceName', 'enName', 'confirmedCount', 'currentConfirmedCount', 'curedCount', 'deadCount']\r\n        })\r\n        .transform({\r\n            type: 'geo.centroid',\r\n            geoDataView: worldGeo,\r\n            field: 'enName',\r\n            as: ['longitude', 'latitude'],\r\n        });\r\n\r\n    // 显示数据配置\r\n    const showData = ds\r\n        .createView()\r\n        .source(disData)\r\n        .transform({\r\n            type: 'geo.centroid',\r\n            geoDataView: worldGeo,\r\n            field: 'enName',\r\n            as: ['longitude', 'latitude'],\r\n        });\r\n    const pointView = chart.createView();\r\n    pointView.data(showData.rows);\r\n    pointView\r\n        .point()\r\n        .position('longitude*latitude')\r\n        .color(option['bubbleFillColor'])\r\n        .shape(\"circle\")\r\n        .size(option['showField'], [30, option['fieldMax']])\r\n        .tooltip(\"confirmedCount*currentConfirmedCount*curedCount*deadCount\")\r\n        .style({\r\n            fillOpacity: .3,\r\n            stroke: option['bubbleFillColor']\r\n        });\r\n    pointView.scale({\r\n        cnName: {\r\n            alias: '国家'\r\n        },\r\n        confirmedCount: {\r\n            alias: '累计确诊'\r\n        },\r\n        currentConfirmedCount: {\r\n            alias: '现存确诊'\r\n        },\r\n        curedCount: {\r\n            alias: '累计治愈'\r\n        },\r\n        deadCount: {\r\n            alias: '累计死亡'\r\n        }\r\n    });\r\n    pointView.interaction('element-active');\r\n    chart.render();\r\n}\n\n//# sourceURL=webpack:///./public/javascripts/modules/charts.js?");

/***/ })

})